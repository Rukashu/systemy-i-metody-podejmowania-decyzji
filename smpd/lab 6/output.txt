
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from C:/Users/User/Desktop/metody podejmowania decyzji/systemy-i-metody-podejmowania-decyzji/smpd/lab 6/.RData]

> library("neuralnet")
Warning message:
pakiet ‘neuralnet’ zosta³ zbudowany w wersji R 3.3.3 
> 
> #Going to create a neural network to perform prediction
> #Type ?neuralnet for more information on the neuralnet library
> 
> #Generate training data
> #And store them as a dataframe
> traininginput <- as.data.frame(matrix(c(7.9 , 32 , 2 ,
+                                         7.9 , 32 , 2 ,
+                                         7.9 , 128 , 2,
+                                         9.7 , 32 , 2 ,
+                                         7.9 , 128 , 2 ,
+                                         12.9 , 128 , 4 ,
+                                         12.9 , 128 , 4 ,
+                                         9.7 , 256 , 2 ,
+                                         12.9 , 256 , 4 ,
+                                         7.9 , 16 , 2 ), nrow=10, ncol=3))
> trainingoutput <- c(2499, 2399, 2899, 3599, 2999, 4949, 5199, 4599, 5699, 1869)
> 
> #Column bind the data into one variable
> trainingdata <- cbind(traininginput, trainingoutput)
> 
> # Create Vector of Column Max and Min Values
> maxs <- apply(trainingdata[,], 2, max)
> mins <- apply(trainingdata[,], 2, min)
> 
> # Use scale() and convert the resulting matrix to a data frame
> scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
> trainingdata <- scaled.trainingdata
> 
> # Check out results
> print(head(trainingdata, 10))
           V1         V2          V3 trainingoutput
1  0.04682540 0.23809524 0.007874016      0.1644909
2  0.23809524 0.00000000 0.030314961      0.1383812
3  0.00000000 0.04682540 1.000000000      0.2689295
4  0.04682540 1.00000000 0.000000000      0.4516971
5  0.23809524 0.00000000 0.042913386      0.2950392
6  0.00000000 0.08650794 1.000000000      0.8041775
7  0.04682540 1.00000000 0.007874016      0.8694517
8  1.00000000 0.01587302 0.023228346      0.7127937
9  0.00000000 0.08650794 0.055118110      1.0000000
10 0.06111111 1.00000000 0.000000000      0.0000000
> 
> colnames(trainingdata) <- c("wyswietlacz", "pojemnosc", "RAM", "Price") 
> print(trainingdata)
   wyswietlacz  pojemnosc         RAM     Price
1   0.04682540 0.23809524 0.007874016 0.1644909
2   0.23809524 0.00000000 0.030314961 0.1383812
3   0.00000000 0.04682540 1.000000000 0.2689295
4   0.04682540 1.00000000 0.000000000 0.4516971
5   0.23809524 0.00000000 0.042913386 0.2950392
6   0.00000000 0.08650794 1.000000000 0.8041775
7   0.04682540 1.00000000 0.007874016 0.8694517
8   1.00000000 0.01587302 0.023228346 0.7127937
9   0.00000000 0.08650794 0.055118110 1.0000000
10  0.06111111 1.00000000 0.000000000 0.0000000
> 
> #Train the neural network
> #Going to have C(6, 5, 3) hidden layers
> #Threshold is a numeric value specifying the threshold for the partial
> #derivatives of the error function as stopping criteria.
> net.price <- neuralnet(Price~wyswietlacz+pojemnosc+RAM, trainingdata, hidden=c(6, 5, 3), threshold=0.001)
> print(net.price)
$call
neuralnet(formula = Price ~ wyswietlacz + pojemnosc + RAM, data = trainingdata, 
    hidden = c(6, 5, 3), threshold = 0.001)

$response
          Price
1  0.1644908616
2  0.1383812010
3  0.2689295039
4  0.4516971279
5  0.2950391645
6  0.8041775457
7  0.8694516971
8  0.7127937337
9  1.0000000000
10 0.0000000000

$covariate
               [,1]          [,2]           [,3]
 [1,] 0.04682539683 0.23809523810 0.007874015748
 [2,] 0.23809523810 0.00000000000 0.030314960630
 [3,] 0.00000000000 0.04682539683 1.000000000000
 [4,] 0.04682539683 1.00000000000 0.000000000000
 [5,] 0.23809523810 0.00000000000 0.042913385827
 [6,] 0.00000000000 0.08650793651 1.000000000000
 [7,] 0.04682539683 1.00000000000 0.007874015748
 [8,] 1.00000000000 0.01587301587 0.023228346457
 [9,] 0.00000000000 0.08650793651 0.055118110236
[10,] 0.06111111111 1.00000000000 0.000000000000

$model.list
$model.list$response
[1] "Price"

$model.list$variables
[1] "wyswietlacz" "pojemnosc"   "RAM"        


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<environment: 0x0000000010ac6a98>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<environment: 0x0000000010ac6a98>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
     wyswietlacz     pojemnosc            RAM        Price
1  0.04682539683 0.23809523810 0.007874015748 0.1644908616
2  0.23809523810 0.00000000000 0.030314960630 0.1383812010
3  0.00000000000 0.04682539683 1.000000000000 0.2689295039
4  0.04682539683 1.00000000000 0.000000000000 0.4516971279
5  0.23809523810 0.00000000000 0.042913385827 0.2950391645
6  0.00000000000 0.08650793651 1.000000000000 0.8041775457
7  0.04682539683 1.00000000000 0.007874015748 0.8694516971
8  1.00000000000 0.01587301587 0.023228346457 0.7127937337
9  0.00000000000 0.08650793651 0.055118110236 1.0000000000
10 0.06111111111 1.00000000000 0.000000000000 0.0000000000

$net.result
$net.result[[1]]
            [,1]
1  0.16419251099
2  0.13837711073
3  0.27115201496
4  0.44674947934
5  0.29432952700
6  0.80297820963
7  0.87187510800
8  0.71242957292
9  0.99975587629
10 0.00369081879


$weights
$weights[[1]]
$weights[[1]][[1]]
              [,1]         [,2]           [,3]           [,4]           [,5]
[1,] -1.1405218834  4.508491779  -0.3352523597  -0.8092810282 -0.02481863419
[2,] -0.6290478786 -3.788855659 -35.7307711860  -0.2268643833  0.28042878705
[3,]  0.9701568039 -3.704752648   0.8095655015   0.5444091730 15.50195745494
[4,] 10.2685058813 -4.076185420   5.6810272696 -58.6165502625 -0.87576080609
               [,6]
[1,]   0.4541537823
[2,]   0.6873595043
[3,] -33.1716808111
[4,]  48.7634044982

$weights[[1]][[2]]
              [,1]          [,2]            [,3]          [,4]           [,5]
[1,]  0.4068875323 -0.1659311290   1.33593446583 -0.2328344466 -1.52810319382
[2,]  2.2043327604 -0.8827919810 -11.50278255438 -3.3286481393 -1.22975764500
[3,] -0.2941459641 -0.4417247905  -1.06943840472  2.1055485621 -1.22608096202
[4,] 10.1101437737 -2.7823722874 -23.18615502584 -6.6990210051 -0.45767069123
[5,] -5.7716618170 16.2800270744  55.62576621924  7.9313043150 -0.06902024016
[6,] -0.2584969370  5.4643162926   1.37902008576 -2.2390075403  2.45078794161
[7,]  2.3704262922  0.7103520079   0.02162196971 -0.2580363392  2.07148226988

$weights[[1]][[3]]
              [,1]          [,2]          [,3]
[1,]  -3.232051445 -0.6209708224  0.6013525822
[2,]  -4.512213137  1.2905342917  1.2049847772
[3,]   7.289474068  0.4822249142  0.1817767136
[4,]   3.095077821  0.4642153544  0.3549523435
[5,] -11.528740561 -4.7341453810 -6.4098374285
[6,]  12.423981574  2.2917449679  2.4666578426

$weights[[1]][[4]]
              [,1]
[1,] -1.7423931559
[2,]  0.8073881063
[3,]  1.2327335238
[4,]  0.9054152742



$startweights
$startweights[[1]]
$startweights[[1]][[1]]
               [,1]           [,2]          [,3]          [,4]          [,5]
[1,] -0.77154097514 -0.02885164528  1.1791685289 -0.8674665307 -0.1748598178
[2,]  0.52307077545 -1.62033304319 -0.1735792202  0.1135261763 -1.3781808897
[3,] -0.23487946104 -0.33513122529 -0.6860801244  2.1731782105  0.2995740107
[4,]  0.04677195317 -1.36489688112  1.5754503271 -2.1893223366 -0.2637465414
              [,6]
[1,]  0.3358498341
[2,]  0.2319147810
[3,] -1.1662469224
[4,]  0.4200693835

$startweights[[1]][[2]]
               [,1]            [,2]           [,3]           [,4]          [,5]
[1,]  0.02299196989  0.009572239169  1.48599213373 -0.57489190976 -2.2106739465
[2,]  1.70926676228  0.017502600765 -0.46499200291 -0.36695519094 -1.1896514670
[3,]  0.16463771422 -0.522831415323 -0.61251292213 -1.33436956232 -1.1379527641
[4,] -0.52480922608 -0.222723455366  0.44690335700 -0.29149131050 -0.9685183256
[5,] -2.05503670951  0.031899569425 -2.11982961251 -0.01272328613 -0.3559986440
[6,] -0.61455748818  0.851592686351  1.43964394339 -1.81203990768  0.4077729539
[7,]  0.62092893699  0.883623019826 -0.03819601414  0.83045749951  0.7980513150

$startweights[[1]][[3]]
               [,1]           [,2]          [,3]
[1,] -1.02547969742 -0.95759639443  0.1364875964
[2,] -0.04486649053  1.30835117549  0.7421233320
[3,]  1.06722939741 -0.13253696542 -0.4170604589
[4,]  2.19391696208 -0.08979037888 -0.1945730081
[5,] -1.91210930946 -1.72757579048 -1.1108444524
[6,] -1.03962018047  0.02027474639 -1.2303557661

$startweights[[1]][[4]]
              [,1]
[1,] -1.7527054811
[2,] -0.1294306007
[3,]  0.5052121366
[4,]  0.4155645969



$generalized.weights
$generalized.weights[[1]]
              [,1]            [,2]             [,3]
1   -198.300529036    11.266003806   592.5689559667
2      3.296329985    74.216244322   197.8237391045
3      4.426761851    45.912232816     0.7126881681
4   -125.376427485     7.431173268   362.7680281114
5      2.147021526    56.257709380    37.6396255680
6      7.054744250    72.636974971     1.1322179700
7    -94.674178645     6.126126303   241.1881254871
8      5.965333639    20.343723895   123.2150705038
9   1277.573053550 -5360.466903929 12274.5036332680
10 -7532.099021249   554.380761482 29828.9421850985


$result.matrix
                                         1
error                      0.0000255685386
reached.threshold          0.0009229469349
steps                   1603.0000000000000
Intercept.to.1layhid1     -1.1405218834071
wyswietlacz.to.1layhid1   -0.6290478786193
pojemnosc.to.1layhid1      0.9701568039285
RAM.to.1layhid1           10.2685058813127
Intercept.to.1layhid2      4.5084917794215
wyswietlacz.to.1layhid2   -3.7888556593726
pojemnosc.to.1layhid2     -3.7047526481724
RAM.to.1layhid2           -4.0761854204348
Intercept.to.1layhid3     -0.3352523596680
wyswietlacz.to.1layhid3  -35.7307711859951
pojemnosc.to.1layhid3      0.8095655015144
RAM.to.1layhid3            5.6810272695665
Intercept.to.1layhid4     -0.8092810282029
wyswietlacz.to.1layhid4   -0.2268643833111
pojemnosc.to.1layhid4      0.5444091730249
RAM.to.1layhid4          -58.6165502624936
Intercept.to.1layhid5     -0.0248186341896
wyswietlacz.to.1layhid5    0.2804287870462
pojemnosc.to.1layhid5     15.5019574549352
RAM.to.1layhid5           -0.8757608060858
Intercept.to.1layhid6      0.4541537822977
wyswietlacz.to.1layhid6    0.6873595042725
pojemnosc.to.1layhid6    -33.1716808111463
RAM.to.1layhid6           48.7634044982230
Intercept.to.2layhid1      0.4068875322736
1layhid.1.to.2layhid1      2.2043327604324
1layhid.2.to.2layhid1     -0.2941459640860
1layhid.3.to.2layhid1     10.1101437736945
1layhid.4.to.2layhid1     -5.7716618169569
1layhid.5.to.2layhid1     -0.2584969370063
1layhid.6.to.2layhid1      2.3704262921673
Intercept.to.2layhid2     -0.1659311289817
1layhid.1.to.2layhid2     -0.8827919810483
1layhid.2.to.2layhid2     -0.4417247905393
1layhid.3.to.2layhid2     -2.7823722874383
1layhid.4.to.2layhid2     16.2800270744391
1layhid.5.to.2layhid2      5.4643162925554
1layhid.6.to.2layhid2      0.7103520078693
Intercept.to.2layhid3      1.3359344658342
1layhid.1.to.2layhid3    -11.5027825543772
1layhid.2.to.2layhid3     -1.0694384047167
1layhid.3.to.2layhid3    -23.1861550258418
1layhid.4.to.2layhid3     55.6257662192386
1layhid.5.to.2layhid3      1.3790200857580
1layhid.6.to.2layhid3      0.0216219697085
Intercept.to.2layhid4     -0.2328344466181
1layhid.1.to.2layhid4     -3.3286481393196
1layhid.2.to.2layhid4      2.1055485620745
1layhid.3.to.2layhid4     -6.6990210051188
1layhid.4.to.2layhid4      7.9313043149974
1layhid.5.to.2layhid4     -2.2390075402732
1layhid.6.to.2layhid4     -0.2580363391787
Intercept.to.2layhid5     -1.5281031938153
1layhid.1.to.2layhid5     -1.2297576450030
1layhid.2.to.2layhid5     -1.2260809620246
1layhid.3.to.2layhid5     -0.4576706912326
1layhid.4.to.2layhid5     -0.0690202401593
1layhid.5.to.2layhid5      2.4507879416135
1layhid.6.to.2layhid5      2.0714822698778
Intercept.to.3layhid1     -3.2320514453457
2layhid.1.to.3layhid1     -4.5122131369735
2layhid.2.to.3layhid1      7.2894740679487
2layhid.3.to.3layhid1      3.0950778210799
2layhid.4.to.3layhid1    -11.5287405609449
2layhid.5.to.3layhid1     12.4239815742772
Intercept.to.3layhid2     -0.6209708224014
2layhid.1.to.3layhid2      1.2905342916703
2layhid.2.to.3layhid2      0.4822249141515
2layhid.3.to.3layhid2      0.4642153544284
2layhid.4.to.3layhid2     -4.7341453809816
2layhid.5.to.3layhid2      2.2917449679388
Intercept.to.3layhid3      0.6013525822248
2layhid.1.to.3layhid3      1.2049847771932
2layhid.2.to.3layhid3      0.1817767136207
2layhid.3.to.3layhid3      0.3549523435440
2layhid.4.to.3layhid3     -6.4098374285014
2layhid.5.to.3layhid3      2.4666578426366
Intercept.to.Price        -1.7423931559093
3layhid.1.to.Price         0.8073881063257
3layhid.2.to.Price         1.2327335238430
3layhid.3.to.Price         0.9054152742467

attr(,"class")
[1] "nn"
> 
> #Plot the neural network
> plot(net.price)
> 
> #Test the neural network on some training data
> testdata <- as.data.frame(matrix(c(7.9, 32, 2,
+                                    9.7, 256, 4,
+                                    12.9, 128, 2), nrow=3, ncol=3))
> scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
> net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
> 
> #Lets see what properties net.price has
> ls(net.results)
[1] "net.result" "neurons"   
> 
> #Lets see the results
> print(net.results$net.result)
             [,1]
[1,] 0.8605411391
[2,] 1.0044450045
[3,] 0.4609335516